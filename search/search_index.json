{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"wmax641's docs","text":"<p>A personal collection of notes and docs</p>"},{"location":"patterns/docker/","title":"Dockerfile Templates","text":""},{"location":"patterns/docker/#generic-dockerfile","title":"Generic Dockerfile","text":"<pre><code>FROM alpine:latest\n\nLABEL tag_key=\"tag_value\"\n\nENV SOME_ENV_VAR=SOME_VALUE\n\nARG TZ=Australia/Sydney\n\nRUN apk update --no-cache --purge \\\n    &amp;&amp; apk upgrade --no-cache \\\n    &amp;&amp; apk add --no-cache --update python3 tzdata \\\n    &amp;&amp; cp /usr/share/zoneinfo/${TZ} /etc/localtime\n\n# Install Python3 pip and modules\nRUN wget https://bootstrap.pypa.io/get-pip.py \\\n    &amp;&amp; python3 get-pip.py \\\n    &amp;&amp; pip3 install --upgrade \\\n        boto3 \\\n        requests \\\n    &amp;&amp; python3 -m pip uninstall -y pip setuptools \\\n    &amp;&amp; rm get-pip.py \\\n    &amp;&amp; rm -rf /usr/lib/python*/ensurepip\n\n# Install Application\nWORKDIR /app\nCOPY app.py ./\nCOPY config.yml ./\n\n# Drop to unprivileged user\nRUN addgroup -g 1337 user &amp;&amp; adduser -D -u 1337 -G user user\nUSER user\n\nENTRYPOINT [\"./app.py\", \"--config\", \"config.yml\"]\n</code></pre>"},{"location":"patterns/k8s/","title":"Kubernetes / K8s","text":""},{"location":"patterns/k8s/#deployments","title":"Deployments","text":""},{"location":"patterns/k8s/#replicaset-rollingupdate","title":"ReplicaSet, RollingUpdate","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\n  labels:\n    app: my-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-app\n        image: jocatalin/kubernetes-bootcamp:v1\n      - name: my-app-sidecar\n        image: alpine:latest\n        command: ['sh', '-c', 'env &amp;&amp; sleep 3600']\n        env:\n        - name: SIMPLE_ENV\n          value: \"1337\"\n  minReadySeconds: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n</code></pre>"},{"location":"patterns/k8s/#configmap-and-environment-var","title":"ConfigMap and environment var","text":""},{"location":"patterns/k8s/#key-value-pairs","title":"Key Value pairs","text":"<p>Includes declaration:</p> <ul> <li>direct Environment variable declaration</li> <li>ConfigMap reference</li> </ul> <pre><code>...\nspec:\n  containers:\n  - name: my-app\n    image: jocatalin/kubernetes-bootcamp:v1\n  - name: my-app-sidecar\n    image: alpine:latest\n    command: ['sh', '-c', 'env &amp;&amp; sleep 3600']\n    env:\n    - name: DIRECT_ENV\n      value: \"1337\"\n    - name: CONFIG_MAP_ENV\n      valueFrom: \n        configMapKeyRef:\n          name: my-app-config-map\n          key: config_map_var\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-app-config-map\ndata:\n  # simple keys/value;\n  config_map_var: \"13337\"\n  # file-like keys\n  file.properties: |\n    enemy.types=aliens,monsters\n    player.maximum-lives=5\n</code></pre>"},{"location":"patterns/k8s/#hardcoded-files","title":"Hardcoded Files","text":"<p>Hardcode files into ConfigMap, then mount them onto volume at specific file location</p> <p>This example mounts a hard coded file at <code>/config/config.yml</code> <pre><code>...\nspec:\n  containers:\n  - name: my-app-sidecar\n    image: alpine:latest\n    command: ['sh', '-c', 'env &amp;&amp; cat /config/config.yml  &amp;&amp; sleep 3600']\n    volumeMounts:\n    - mountPath: /config\n      name: config-volume\n\n  volumes:\n    - name: config-volume\n      configMap:\n        name: my-app-config-map\n        items:\n        - key: config_file_data\n          path: config.yml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-app-config-map\ndata:\n  # file-like keys\n  config_file_data: |\n    [default]\n    some_var:1234\n    #some_text asdf qwerty\n</code></pre></p>"},{"location":"patterns/k8s/#secrets","title":"Secrets","text":"<p>Similar concept to <code>ConfigMap</code>, but configuration slightly different;</p> <p>This mounts a hard-coded base64 encoded secret file to <code>/secrets/.secret</code> And also a plain text file to <code>/secrets/password</code> <pre><code>...\nspec:\n  containers:\n  - name: my-app-sidecar\n    image: alpine:latest\n    command: ['sh', '-c', 'env &amp;&amp; cat /config/config.yml  &amp;&amp; sleep 3600']\n    volumeMounts:\n    - mountPath: /secrets\n      name: secret-volume\n\n  volumes:\n  - name: secret-volume\n    secret:\n      secretName: my-app-secret\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-app-secret\ndata:\n  .secret: SGVsbG8gV29ybGQhIDE=\nstringData:\n  password: p@ssw0rd!\n</code></pre></p>"},{"location":"patterns/k8s/#services","title":"Services","text":""},{"location":"patterns/k8s/#nodeport","title":"NodePort","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: my-app-service\nspec:\n  type: NodePort\n  selector:\n    app: my-app\n  ports:\n    - port: 8080\n      ## By default and for convenience, the `targetPort` is set to the same value as \n      ## the `port` field.\n      #targetPort: 80\n      ## By default and for convenience, the Kubernetes control plane will allocate a \n      ## port from a range (default: 30000-32767)\n      nodePort: 30003\n---\n</code></pre>"},{"location":"patterns/k8s/#namespace-setup","title":"Namespace Setup","text":"<p>Sets up a namespace called <code>my-namespace</code> with various PodSecurity config <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/enforce-version: v1.28\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/audit-version: v1.28\n    pod-security.kubernetes.io/warn: restricted\n    pod-security.kubernetes.io/warn-version: v1.28\n</code></pre></p>"},{"location":"patterns/personal_config/","title":"Personal Config Files","text":""},{"location":"patterns/personal_config/#vim","title":"vim","text":"<pre><code>filetype plugin on\n\" indenting and tabs are 4 spaces\nset shiftwidth=4\nset tabstop=4\nset expandtab\n\n\" I don't wanna follow PEP8 style\n\"let g:python_recommended_style = 0\n\n:colorscheme default\n   \nset smartindent\nset autoindent\nsyntax on\n\n\" completion menu\nset completeopt=menuone\n\n\" use mouse\nset mouse=a\n\n\" see numbered lines\nset number\n\n\" make a vertical coloumn line length marker\nset cc=96\n\n\"keep sceen centered near cursor \nset scrolloff=12\n\n\" vi compatibility\nset nocompatible\n\n\" show current mode\nset showmode\n\n\" Enable enhanced command-line completion. Presumes you have compiled\n\" with +wildmenu. See :help 'wildmenu'\nset wildmenu\n\n\" Automatically read a file that has changed on disk\nset autoread\n\n\" normal backspace\nset backspace=2\n\n\" enable status line always\nset laststatus=2\n\nset statusline=[%{&amp;ff}]%t\\ %=%2B\\ col:%2c\\ %l/%L\\ %2P\n\n\nset t_Co=256\n:set cursorline\nhi CursorLine ctermbg=8 ctermfg=NONE\nhi StatusLine ctermbg=255 ctermfg=8\n\" hi Comment ctermfg=7\n\nau InsertEnter * hi CursorLine ctermbg=52\nau InsertLeave * hi CursorLine ctermbg=8\nau InsertEnter * hi StatusLine ctermbg=255 ctermfg=52\nau InsertLeave * hi StatusLine ctermbg=255 ctermfg=8\n\nnnoremap  &lt;c-n&gt;       :tabnew&lt;enter&gt;\nnnoremap  &lt;a-right&gt;   :tabn&lt;enter&gt;\nnnoremap  &lt;a-left&gt;    :tabp&lt;enter&gt;\n\nnnoremap  &lt;space&gt; za\nvnoremap  &lt;space&gt; zf\n\nnoremap VV ^v$\n</code></pre>"},{"location":"patterns/terraform/","title":"Terraform Boilerplate Code","text":""},{"location":"patterns/terraform/#makefile-single-account","title":"Makefile (single account)","text":"<pre><code>ACCOUNT ?= $(shell aws sts get-caller-identity --query 'Account' --output text)\nBASE_NAME ?= $(shell basename $(CURDIR))\nREGION ?= \"ap-southeast-2\"\n\ninit:\n\tterraform init \\\n\t\t-backend-config=\"bucket=tf-${ACCOUNT}\" \\\n\t\t-backend-config=\"key=${BASE_NAME}\" \\\n\t\t-backend-config=\"region=${REGION}\"\n\ninits3:\n\t@echo -n \"Create s3 bucket: 'tf-${ACCOUNT}'?   [y/N] \" &amp;&amp; read ans &amp;&amp; [ $${ans:-N} = y ]\n\taws s3api create-bucket --bucket \"tf-${ACCOUNT}\" --region \"${REGION}\" --create-bucket-configuration LocationConstraint=\"${REGION}\"\n\nfmt:\n\tterraform fmt -write=true --recursive\n\nvalidate:\n\tterraform validate\n\nplan:\n\tterraform plan -input=false -out=tfplan-${ACCOUNT}\n\napply:\n\tterraform apply -input=false tfplan-${ACCOUNT}\n\ndestroy:\n\tterraform plan -destroy -input=false -out=tfplan-${ACCOUNT}\n\tterraform apply -input=false tfplan-${ACCOUNT}\n</code></pre>"},{"location":"patterns/terraform/#makefile-mutliple-workspace-on-same-account","title":"Makefile (mutliple workspace on same account)","text":"<pre><code>ACCOUNT_ID ?= $(shell aws sts get-caller-identity --query 'Account' --output text)\nTARGET_ENV ?= dev\nPROJECT_NAME ?=$(shell basename $(CURDIR))\nREGION ?= \"ap-southeast-2\"\n\nifeq ($(shell printf '%s' '$(ACCOUNT_ID)' | wc -m),0)\n$(error ACCOUNT_ID is not set)\nendif\n\nWORKSPACE_EXISTS := $(shell terraform workspace list | grep -w $(TARGET_ENV) | wc -l)\n\ndebug:\n\t@echo \"ACCOUNT_ID = ${ACCOUNT_ID}\"\n\t@echo \"TARGET_ENV = ${TARGET_ENV}\"\n\t@echo \"PROJECT_NAME = ${PROJECT_NAME}\"\n\t@echo \"WORKSPACE_EXISTS = $(WORKSPACE_EXISTS)\"\n\ninit:\n\tterraform init \\\n\t\t-backend-config=\"bucket=tf-${ACCOUNT_ID}\" \\\n\t\t-backend-config=\"key=${PROJECT_NAME}\" \\\n\t\t-backend-config=\"region=${REGION}\"\n\t\nifeq ($(WORKSPACE_EXISTS),0)\n\tterraform workspace new $(TARGET_ENV)\nendif\n\nfmt:\n\tterraform fmt -write=true -recursive\n\nvalidate:\n\tset -e\n\tterraform fmt -write=false -recursive -check\n\tterraform validate\n\nswitch_workspace:\n\tterraform workspace select ${TARGET_ENV}\n\tterraform workspace show\n\nplan: switch_workspace\n\tterraform plan -input=false -out=tfplan-${TARGET_ENV}-${ACCOUNT_ID} -var-file=\"vars/${TARGET_ENV}.tfvars\"\n\napply: switch_workspace\n\tterraform apply -input=false tfplan-${TARGET_ENV}-${ACCOUNT_ID}\n\ndeploy: switch_workspace plan apply\n\ndestroy: switch_workspace\n\tterraform plan -destroy -input=false -out=tfplan-${TARGET_ENV}-${ACCOUNT_ID} -var-file=\"vars/${TARGET_ENV}.tfvars\"\n\tterraform apply -input=false tfplan-${TARGET_ENV}-${ACCOUNT_ID}\n\nclean:\n\trm -f  tfplan-*  errored.tfstate \n</code></pre>"},{"location":"patterns/terraform/#common","title":"Common","text":""},{"location":"patterns/terraform/#maintf","title":"main.tf","text":"<pre><code>terraform {\n  backend \"s3\" {\n  }\n\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"&gt;= 5.4.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"ap-southeast-2\"\n}\n</code></pre>"},{"location":"patterns/terraform/#datatf","title":"data.tf","text":"<pre><code>data \"aws_region\" \"current\" {}\ndata \"aws_caller_identity\" \"current\" {}\n</code></pre>"},{"location":"patterns/terraform/#variablestf","title":"variables.tf","text":"<pre><code>variable \"base_name\" {\n  description = \"Common prefix used for naming resources of this project\"\n  default     = \"tf-project-name\"\n}\nvariable \"common_tags\" {\n  description = \"Common tags used in resources of this project\"\n  default     = {\n    \"project\" = \"tf-project-name\"\n  }\n}\n</code></pre>"},{"location":"patterns/terraform/#lambda","title":"Lambda","text":"<p>Assumes Python Lambda code in directory <code>/files/myscript.py</code>, and entry point is a function called <code>lambda_handler()</code> <pre><code>data \"archive_file\" \"myscript\" {\n  type             = \"zip\"\n  source_file      = \"${path.module}/lambda/myscript.py\"\n  output_file_mode = \"0666\"\n  output_path      = \"${path.module}/lambda/myscript.py.zip\"\n}\n\nresource \"aws_lambda_function\" \"myscript\" {\n  filename         = data.archive_file.myscript.output_path\n  function_name    = \"${var.base_name}-myscript-lambda\"\n  role             = aws_iam_role.lambda_myscript.arn\n  handler          = \"myscript.lambda_handler\"\n  timeout          = 4\n  source_code_hash = filebase64sha256(data.archive_file.myscript.output_path)\n  runtime          = \"python3.9\"\n  #environment {\n  #  variables = {\n  #    foo = \"bar\"\n  #  }\n  #}\n  tags = merge({ \"Name\" = \"${var.base_name}-myscript\" }, var.common_tags)\n}\n\n# Execution IAM role for lambda\nresource \"aws_iam_role\" \"lambda_myscript\" {\n  name               = \"${var.base_name}-LambdaServiceRole\"\n  path               = \"/service/\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n      },\n    ]\n  })\n\n  # inline execution role policy\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = [\n          \"ec2:Describe*\",\n        ]\n        Effect   = \"Allow\"\n        Resource = \"*\"\n      },\n    ]\n  })\n\n  managed_policy_arns = [\n    aws_iam_policy.lambda_cloudwatch_policy.arn,\n  ]\n  tags = merge({ \"Name\" = \"${var.base_name}-LambdaServiceRole\" }, var.common_tags)\n}\n\ndata \"aws_iam_policy_document\" \"lambda_cloudwatch_policy_doc\" {\n  statement {\n    actions = [\"logs:CreateLogGroup\"]\n    resources = [\n      \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:*\"\n    ]\n  }\n  statement {\n    actions = [\n      \"logs:CreateLogStream\",\n      \"logs:PutLogEvents\"\n    ]\n    resources = [\n      \"arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:/aws/lambda/*\"\n    ]\n  }\n}\n</code></pre></p>"},{"location":"patterns/terraform_aliyun/","title":"Terraform (Aliyun) Boilerplate","text":""},{"location":"patterns/terraform_aliyun/#makefile","title":"Makefile","text":"<pre><code>ACCOUNT=$(shell aliyun sts GetCallerIdentity | jq -r '.AccountId')\nBASE_NAME=$(shell basename $(CURDIR))\nREGION=\"cn-hongkong-b\"\n\ninit:\n\tterraform init \\\n\t\t-backend-config=\"bucket=tf-${ACCOUNT}\" \\\n\t\t-backend-config=\"key=${BASE_NAME}\" \\\n\t\t-backend-config=\"region=${REGION}\"\n\ninits3:\n\t@echo -n \"Create OSS bucket: 'tf-${ACCOUNT}'?   [y/N] \" &amp;&amp; read ans &amp;&amp; [ $${ans:-N} = y ]\n\taliyun oss mb \"oss://tf-${ACCOUNT}\"\n\nfmt:\n\tterraform fmt -write=true --recursive\n\nvalidate:\n\tterraform validate\n\nplan:\n\tterraform plan -input=false -out=tfplan-${ACCOUNT}\n\napply:\n\tterraform apply -input=false tfplan-${ACCOUNT}\n\ndestroy:\n\tterraform plan -destroy -input=false -out=tfplan-${ACCOUNT}\n\tterraform apply -input=false tfplan-${ACCOUNT}\n</code></pre>"},{"location":"patterns/terraform_aliyun/#common","title":"Common","text":""},{"location":"patterns/terraform_aliyun/#maintf","title":"main.tf","text":"<pre><code>terraform {\n  backend \"oss\" {\n  }\n\n  required_providers {\n    alicloud = {\n      source  = \"aliyun/alicloud\"\n      version = \"1.211.1\"\n    }\n  }\n}\n\nprovider \"alicloud\" {\n  region = \"cn-hongkong\"\n}\n</code></pre>"},{"location":"patterns/terraform_aliyun/#datatf","title":"data.tf","text":"<pre><code>data \"alicloud_regions\" \"current_region_ds\" {\n  current = true\n}\ndata \"alicloud_account\" \"current\" {}\n</code></pre>"},{"location":"patterns/terraform_aliyun/#variablestf","title":"variables.tf","text":"<pre><code>variable \"base_name\" {\n  description = \"Common prefix used for naming resources of this project\"\n  default     = \"tf-project-name\"\n}\nvariable \"common_tags\" {\n  description = \"Common tags used in resources of this project\"\n  default     = {\n    \"project\" = \"tf-project-name\"\n  }\n}\n</code></pre>"},{"location":"sysadmin/certs/","title":"Certificates and OpenSSL Cheatsheet","text":""},{"location":"sysadmin/certs/#view-cert-info","title":"View Cert Info","text":""},{"location":"sysadmin/certs/#single-cert","title":"Single Cert","text":"<p>(For CSRs, replace <code>x509</code> with <code>req</code>) <pre><code>openssl x509 -in CERT.crt -text -noout\n</code></pre></p>"},{"location":"sysadmin/certs/#cert-chainbundle","title":"Cert Chain/bundle","text":"<p>Bundle of multiple PEM certificates in the same file <pre><code>openssl storeutl -noout -text -certs /etc/ssl/certs/ca-certificates.crt\n</code></pre> <pre><code># Full output\nopenssl crl2pkcs7 -nocrl -certfile CHAIN.crt | openssl pkcs7 -print_certs -text -noout\n\n# Just subject and issuer\nopenssl crl2pkcs7 -nocrl -certfile CHAIN.crt | openssl pkcs7 -print_certs -noout\n</code></pre></p>"},{"location":"sysadmin/certs/#s_client-and-connections","title":"s_client and Connections","text":""},{"location":"sysadmin/certs/#show-cert-chain","title":"Show Cert Chain","text":"<pre><code>openssl s_client -showcerts -connect &lt;HOST:PORT&gt;\n</code></pre>"},{"location":"sysadmin/certs/#starttls","title":"STARTTLS","text":"<pre><code>openssl s_client --starttls smtp -connect &lt;HOST:PORT&gt;\n</code></pre>"},{"location":"sysadmin/certs/#shortcut-certcsr-commands","title":"Shortcut Cert/CSR commands","text":""},{"location":"sysadmin/certs/#key-and-csr","title":"Key and CSR","text":"<pre><code>openssl req -new -newkey rsa:2048 -keyout server.key -out server.csr\n</code></pre>"},{"location":"sysadmin/certs/#key-and-self-signed-cert","title":"Key and Self Signed Cert","text":"<pre><code>openssl req -x509 -newkey rsa:4096 -keyout server.key -out cert.crt -sha256 -days 365\n</code></pre>"},{"location":"sysadmin/certs/#certcsr-commands","title":"Cert/CSR commands","text":""},{"location":"sysadmin/certs/#rsa-private-key","title":"RSA Private Key","text":"<pre><code>openssl genrsa -out server.key 4096\n</code></pre>"},{"location":"sysadmin/certs/#ec-private-key","title":"EC Private Key","text":"<pre><code># List supported curves\nopenssl ecparam -list_curves\n\n#  generate key\nopenssl ecparam -name prime256v1 -genkey -out server.key\n</code></pre>"},{"location":"sysadmin/certs/#generate-csr","title":"Generate CSR","text":"<pre><code>openssl req -new -key server.key -out server.csr\n</code></pre>"},{"location":"sysadmin/certs/#generate-san-csr","title":"Generate SAN CSR","text":"<p>First create an openssl config file; openssl.cnf: <pre><code>[ req ]\ndistinguished_name  = dn\nreq_extensions      = req_ext\nprompt              = no\ndefault_md          = sha256\n  \n[ dn ]\nC     = AU\nST    = New South Wales\nL     = Sydney\nO     = Organisation\nCN    = wmax641.website\n  \n[ req_ext ]\nsubjectAltName = @alt_names\n  \n[ alt_names ]\nDNS.1 = wmax641.website\nDNS.2 = *.wmax641.website\n</code></pre> Then generate CSR using the config file <pre><code>openssl req -new -key server.key -out server.csr -config openssl.cnf\n</code></pre></p>"},{"location":"sysadmin/certs/#lets-encrypt","title":"Let's Encrypt","text":""},{"location":"sysadmin/certs/#sign-csr","title":"Sign CSR","text":"<p>Install <code>certbot</code> package, prepare a CSR, then run the <code>certbot</code> utility <pre><code>certbot certonly --csr server.csr --manual --preferred-challenge dns\n</code></pre></p>"},{"location":"sysadmin/git_cheatsheet/","title":"<code>git</code> cheatsheet","text":"<p>My Aliases <pre><code>git config --global alias.cam commit -a -m\ngit config --global alias.cob checkout -b\ngit config --global alias.co checkout\ngit config --global alias.s status\ngit config --global alias.l log --pretty=format:\"%C(yellow)%h\\\\ %ad%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --date=short\ngit config --global alias.fucked reset --hard HEAD\ngit config --global alias.b branch\ngit config --global alias.st status\ngit config --global alias.p push\n</code></pre></p>"},{"location":"sysadmin/jq_cheatsheet/","title":"<code>jq</code> cheatsheet","text":"<p>\u2139\ufe0f The examples here use a JSON output from kubectl: <pre><code>kubectl get po -o json | jq -r\n\n{\n    \"apiVersion\": \"v1\",\n    \"items\": [\n        {\n            \"apiVersion\": \"v1\",\n            \"kind\": \"Pod\",\n            \"metadata\": {\n                \"name\": \"bar-app\",\n                \"namespace\": \"default\",\n            },\n            \"spec\": {\n                \"containers\": [\n                    {\n                        \"image\": \"kicbase/echo-server:1.0\",\n                        \"name\": \"bar-app\",\n                        ...\n                    },\n                ],\n                ...\n            }\n        },\n        ...\n    ]\n</code></pre></p>"},{"location":"sysadmin/jq_cheatsheet/#data-extraction","title":"Data Extraction","text":""},{"location":"sysadmin/jq_cheatsheet/#extract-specific-attribute","title":"Extract specific attribute","text":"<pre><code>jq '.apiVersion'\n\"v1\"\n</code></pre>"},{"location":"sysadmin/jq_cheatsheet/#iterative-extract-attributes","title":"Iterative extract attributes","text":"<pre><code>jq '.items[].metadata.name'\njq '.items[] | .metadata.name'\n\"bar-app\"\n\"foo-app\"\n\"kubes-bootcamp-7c5b8c477c-6bkvc\"\n</code></pre>"},{"location":"sysadmin/jq_cheatsheet/#recursive-extract-attributes","title":"Recursive extract attributes","text":"<pre><code>jq '.items[].spec.containers[].image'\njq '.items[] | .spec.containers[].image'\n\"kicbase/echo-server:1.0\"\n\"wmax641/test-app:latest\"\n\"kicbase/echo-server:1.0\"\n\"gcr.io/google-samples/kubernetes-bootcamp:v1\"\n</code></pre>"},{"location":"sysadmin/jq_cheatsheet/#extract-multiple-attributes","title":"Extract multiple attributes","text":"<p><pre><code>jq '.items[].spec.containers[] | {name, image}'\n\n{\n  \"name\": \"bar-app\",\n  \"image\": \"kicbase/echo-server:1.0\"\n}\n{\n  \"name\": \"wma-test-app\",\n  \"image\": \"wmax641/test-app:latest\"\n}\n{\n  \"name\": \"foo-app\",\n  \"image\": \"kicbase/echo-server:1.0\"\n}\n{\n  \"name\": \"kubes-bootcamp\",\n  \"image\": \"gcr.io/google-samples/kubernetes-bootcamp:v1\"\n}\n</code></pre> <pre><code>jq '.items[].spec.containers[] | {name, image} | join(\",\")'\n\n\"bar-app,kicbase/echo-server:1.0\"\n\"wma-test-app,wmax641/test-app:latest\"\n\"foo-app,kicbase/echo-server:1.0\"\n\"kubes-bootcamp,gcr.io/google-samples/kubernetes-bootcamp:v1\"\n</code></pre></p> <p>However, to extract multiple attributes at different nest levels, employ this strategy: While traversing down the nested structure, save certain attributes as a variable before continuing traversal. Then reconstruct the output referencing the variables <pre><code>jq '.items[] | .metadata.name as $POD_NAME | \n    .spec.containers[] | {\"pod\":$POD_NAME, name, image}'\n\n{\n  \"pod\": \"kubes-bootcamp-7b95d6fbcc-dll6x\",\n  \"name\": \"kubes-bootcamp\",\n  \"image\": \"gcr.io/google-samples/kubernetes-bootcamp:v1\"\n}\n{\n  \"pod\": \"kubes-bootcamp-7b95d6fbcc-dll6x\",\n  \"name\": \"kubes-bootcamp-thirdwheel\",\n  \"image\": \"alpine:latest\"\n}\n{\n  \"pod\": \"kubes-bootcamp-7b95d6fbcc-sgcwt\",\n  \"name\": \"kubes-bootcamp\",\n  \"image\": \"gcr.io/google-samples/kubernetes-bootcamp:v1\"\n}\n{\n  \"pod\": \"kubes-bootcamp-7b95d6fbcc-sgcwt\",\n  \"name\": \"kubes-bootcamp-thirdwheel\",\n  \"image\": \"alpine:latest\"\n}\n</code></pre></p>"},{"location":"sysadmin/jq_cheatsheet/#slice-an-array","title":"Slice an array","text":"<p>Similar to python indexing. Outputs into a separate list, so have to re-reference the new list <pre><code>jq '.items[0:2] | .[].metadata.name'\n\"bar-app\"\n\"foo-app\"\n</code></pre></p>"},{"location":"sysadmin/jq_cheatsheet/#functions","title":"Functions","text":"<p>Get length of an array <pre><code>jq '.items[].spec.containers | length'\n2\n1\n1\n</code></pre> Get keys for attribute <pre><code>jq '.items[1].spec.containers[0] | keys '\n[\n  \"image\",\n  \"imagePullPolicy\",\n  \"name\",\n  \"resources\",\n  \"terminationMessagePath\",\n  \"terminationMessagePolicy\",\n  \"volumeMounts\"\n]\n</code></pre></p>"},{"location":"sysadmin/shell_cheatsheet/","title":"<code>bash</code> / <code>sh</code> cheatsheet","text":""},{"location":"sysadmin/shell_cheatsheet/#basic","title":"Basic","text":""},{"location":"sysadmin/shell_cheatsheet/#cut-specific-column-output","title":"Cut specific column output","text":"<p><code>$0</code> will get the whole line, <code>$n</code> will get the n'th column <pre><code>ls -l | awk '{print $2}'\n</code></pre></p> <p>If delimiter is predictable, can also use <code>cut</code> <pre><code>date | cut -d' ' -f4\n</code></pre></p>"},{"location":"sysadmin/shell_cheatsheet/#loop-over-range","title":"Loop over range","text":"<pre><code>for i in {1..255}; do nc -cv 10.100.56.$i 22; done\n</code></pre>"},{"location":"sysadmin/shell_cheatsheet/#loop-over-list-in-file","title":"Loop over list in file","text":"<p><pre><code>cat list.txt | while read line; do echo \"$line\"; done\n</code></pre> <pre><code>while read line; do echo \"$line\"; done &lt; list.txt\n</code></pre></p>"},{"location":"sysadmin/shell_cheatsheet/#generate-random-string","title":"Generate Random String","text":"<pre><code>tr -dc a-zA-Z0-9 &lt; /dev/random | head -c 18\n</code></pre>"},{"location":"sysadmin/shell_cheatsheet/#complex","title":"Complex","text":""},{"location":"sysadmin/shell_cheatsheet/#loop-over-output","title":"Loop over output","text":"<pre><code>for i in $(docker images | grep \"2 days ago\" | awk '{print $3}'); \n  do docker image rm -f $i; \ndone\n</code></pre>"},{"location":"syseng/docker/","title":"Docker","text":"<p>\u2139\ufe0f The examples here use a mock image <code>wmax641/test-app:latest</code></p>"},{"location":"syseng/docker/#operations","title":"Operations","text":""},{"location":"syseng/docker/#override-keep-running","title":"Override / keep running","text":"<p>Useful to keep container running for troubleshooting <pre><code># Simple drop into shell via override\ndocker run -it --entrypoint=/bin/sh wmax641/test-app:latest\n\n# Override entrypoint into `tail -f /dev/null`\ndocker run -d --entrypoint tail wmax641/test-app:latest -f /dev/null\n</code></pre></p>"},{"location":"syseng/docker/#get-shell-into-container","title":"Get shell into container","text":"<pre><code>docker exec -it &lt;container name/id&gt; /bin/sh\n</code></pre>"},{"location":"syseng/docker/#get-logs","title":"Get Logs","text":"<p>For exited instances - look up history (<code>docker ps -a</code>) to find container name <pre><code>docker ps             # use '-a' for historical containers\ndocker logs &lt;container name/id&gt;\n</code></pre></p>"},{"location":"syseng/docker/#quick-multi-kill-instances","title":"Quick multi-kill instances","text":"<p>Change <code>grep</code> to match the instances you want to kill <pre><code>docker ps | grep \"test-app\" | awk '{print $1}' | while read line; \n    do docker kill $line; \ndone\n</code></pre></p>"},{"location":"syseng/docker/#build","title":"Build","text":""},{"location":"syseng/docker/#build-tag-and-then-push","title":"Build, Tag and then Push","text":"<pre><code>docker build . -t wmax641/test-app:latest\ndocker push wmax641/test-app:latest\n</code></pre>"},{"location":"syseng/docker/#dockerfile-patterns","title":"Dockerfile Patterns","text":"<p>See Dockerfile Pattern</p>"},{"location":"syseng/githubactions/","title":"Github Actions","text":""},{"location":"syseng/githubactions/#operations","title":"Operations","text":""},{"location":"syseng/githubactions/#troubleshootingdebugging","title":"Troubleshooting/Debugging","text":""},{"location":"syseng/githubactions/#oidc","title":"OIDC","text":"<p>Use OIDC Debugger in workflow to to print out OIDC claims included in Github Actions's JWT  <pre><code>    steps:\n    - name: Checkout actions-oidc-debugger\n      uses: actions/checkout@v4\n      with:\n        repository: github/actions-oidc-debugger\n        ref: main\n        token: ${{ secrets.TOKEN }}     # Github Personal Access Token\n        path: ./.github/actions/actions-oidc-debugger\n\n    - name: Debug OIDC Claims\n      uses: ./.github/actions/actions-oidc-debugger\n      with:\n        audience: 'https://github.com/github'\n</code></pre></p>"},{"location":"syseng/k8s/","title":"Kubernetes / K8s","text":""},{"location":"syseng/k8s/#operations","title":"Operations","text":"<p>\u2139\ufe0f  There's also an official K8S cheatsheet here!</p>"},{"location":"syseng/k8s/#set-default-namespace","title":"Set Default Namespace","text":"<pre><code>kubectl config set-context --current --namespace=my-namespace\n</code></pre>"},{"location":"syseng/k8s/#get-pods-with-label","title":"Get pods with label","text":"<pre><code>kubectl get pods -l KEY=VALUE\n</code></pre>"},{"location":"syseng/k8s/#run-commandshell-on-pod","title":"Run command/shell on pod","text":"<p><code>-it</code> is needed if interactive shell is required <code>-c &lt;CONTAINER_NAME&gt;</code> to specify a container in multi-container pod <pre><code>kubectl exec -it POD_NAME -- /bin/bash\n\n# Target specific container in multi-container pod with '-c'\nkubectl exec -it -c CONTAINER_NAME POD_NAME -- /bin/bash\n</code></pre></p>"},{"location":"syseng/k8s/#get-logs-of-container","title":"Get Logs of container","text":"<pre><code>kubectl logs POD_NAME\n\n# Target specific container in multi-container pod with '-c'\nkubectl logs -c CONTAINER_NAME POD_NAME\n</code></pre>"},{"location":"syseng/k8s/#list-all-containers","title":"List all containers","text":"<p>In a specific pod... <pre><code>kubectl get pods POD_NAME -o json | jq '.spec.containers[] | \n    {name, image} | join (\", \")'\n</code></pre> In all pods with a label... <pre><code>kubectl get pods -l KEY=VALUE -o json | jq '.items[] | \n    .metadata.name as $POD_NAME | \n    .spec.containers[] | {\"pod\":$POD_NAME, name, image}'\n</code></pre></p>"},{"location":"syseng/k8s/#refresh-podsdeployment","title":"Refresh Pods/Deployment","text":"<pre><code>kubectl rollout restart deployment/my-app\n</code></pre>"},{"location":"syseng/k8s/#architecture","title":"Architecture","text":""},{"location":"syseng/k8s/#services","title":"Services","text":""},{"location":"syseng/k8s/#nodeport","title":"NodePort","text":"<p>Exposes the service on each Node's IP at a static port (\"NodePort\") </p>"},{"location":"syseng/k8s/#build","title":"Build","text":""},{"location":"syseng/k8s/#patterns","title":"Patterns","text":"<p>See Kubernetes Patterns</p>"},{"location":"syseng/k8s/#dry-run","title":"Dry Run","text":"<p>Helpful to generate K8S YAML config files of ConfigMaps of raw file data as the YAML config for ConfigMap does not support file/path references.</p> <p>This example creates a ConfigMap YAML config file by referencing the content of an actual file (<code>config.ini</code>) from the local system.  <pre><code>cat config.ini\n[defualt]\nconfig0 a\nconfig1 b\n</code></pre> <pre><code>kubectl create cm --dry-run=client test-cm --from-file=config.ini --output yaml\n</code></pre> <pre><code>apiVersion: v1\ndata:\n  config.ini: |\n    [defualt]\n    config0 a\n    config1 b\nkind: ConfigMap\nmetadata:\n  creationTimestamp: null\n  name: test-cm\n</code></pre></p>"},{"location":"syseng/wireguard/","title":"Wireguard - Simple Client Server Setup","text":"<p>Simple setup of wireguard with server and multiple peer config with pre shared keys</p>"},{"location":"syseng/wireguard/#operation","title":"Operation","text":"<p>Check status of Wireguard <pre><code>wg show\n</code></pre></p>"},{"location":"syseng/wireguard/#server","title":"Server","text":"<p>Service is started/stopped with: <pre><code>systemctl start|stop wg-quick@wg0.service\n</code></pre></p> <p>Service is enabled/disabled with <pre><code>systemctl enable wg-quick@wg0.service\n</code></pre></p>"},{"location":"syseng/wireguard/#clientpeer","title":"Client/Peer","text":"<p>Should be managed by Network Manager, after importing it during the setup</p>"},{"location":"syseng/wireguard/#setup","title":"Setup","text":""},{"location":"syseng/wireguard/#server_1","title":"Server","text":"<p>Install wireguard</p> <p>Enable routing by editing <code>/etc/sysctl.conf</code>, and making sure this exists: <pre><code>net.ipv4.ip_forward=1\n</code></pre></p> <p>Reload config: <pre><code>sysctl -p\n</code></pre></p> <p>Go to <code>/etc/wireguard</code>, and generate the public and private keys of the server: <pre><code>umask 077; wg genkey | tee server.privatekey | wg pubkey &gt; server.publickey\n</code></pre></p> <p>Create <code>/etc/wireguard/wg0.conf</code>, and fill in the placeholder values based on the gerneated private key: <pre><code>[Interface]\nAddress = 10.0.0.1/24\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o &lt;INTERFACE&gt; -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o &lt;INTERFACE&gt; -j MASQUERADE\nListenPort = &lt;PORT&gt;\nPrivateKey = &lt;server.privatekey&gt;\n</code></pre></p>"},{"location":"syseng/wireguard/#clientspeers","title":"Client(s)/Peer(s)","text":"<p>Install wireguard</p> <p>Go to <code>/etc/wireguard</code>, and generate the public and private keys of the server, and also the Preshared Key <pre><code>umask 077; wg genkey | tee client.privatekey | wg pubkey &gt; client.publickey \numask 077; wg genpsk &gt; client.preshared\n</code></pre></p> <p>Create <code>/etc/wireguard/wg0.conf</code>, and fill in the placeholder values based ont he gereanted keys, and details of the sever: <pre><code>[Interface]\nAddress = 10.0.0.100/24\nPrivateKey = &lt;client.privatekey&gt;\n\n[Peer]\nPublicKey = &lt;server.publickey&gt;\nAllowedIPs = 10.0.0/24, &lt;OTHER NETWORKS&gt; \nEndpoint = &lt;DOMAIN/IP&gt;:&lt;PORT&gt;\nPersistentKeepalive = 15\nPresharedKey = &lt;client.preshared&gt;\n</code></pre></p> <p>Then Add this config into NetworkManager <pre><code>nmcli connection import type wireguard file /etc/wireguard/wg0.conf\n</code></pre></p>"},{"location":"syseng/wireguard/#server-again","title":"Server Again","text":"<p>Append the below peer details into <code>/etc/wireguard/wg0.conf</code> <pre><code>[Peer]\nPublicKey = &lt;client.publickey&gt;\nAllowedIPs = 10.0.0.100/32\nPresharedKey = &lt;client.preshared&gt;\n</code></pre></p> <p>The resulting <code>/etc/wireguard/wg0.conf</code> on the server should now look like this: <pre><code>[Interface]\nAddress = 10.0.0.1/24\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o &lt;INTERFACE&gt; -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o &lt;INTERFACE&gt; -j MASQUERADE\nListenPort = &lt;PORT&gt;\nPrivateKey = &lt;server.privatekey&gt;\n\n[Peer]\nPublicKey = &lt;client.publickey&gt;\nAllowedIPs = 10.0.0.100/32\nPresharedKey = &lt;client.preshared&gt;\n</code></pre></p>"},{"location":"wap/iam_accounts/","title":"IAM and Accounts for WAP","text":"<p>Identity and Access Management, and Account access for the wmax641 app platform (WAP)</p>"},{"location":"wap/iam_accounts/#architecture-and-design","title":"Architecture and Design","text":""},{"location":"wap/iam_accounts/#operation","title":"Operation","text":""},{"location":"wap/iam_accounts/#deploy-role","title":"Deploy Role","text":"<p>This role should be used by Github Actions to create and deploy AWS resources.</p> <p>Is meant to be assumed by Github Action's web identity conditional that it comes from a particular repository and environment. This role should be given permissions to create and modify AWS resources.</p>"},{"location":"wap/iam_accounts/#service-role","title":"Service Role","text":"<p>Is any sort of IAM role that may be used by a particular system (as opposed to being assumed by Github Actions)</p>"},{"location":"wap/iam_accounts/#create-roles","title":"Create Roles","text":"<p>Follow the example in wmax641/wap-iam-accounts/role_dummy.tf.example.</p> <p>For deploy role, need to set <code>create_deploy_role = true</code></p> <p>Very important to set the correct <code>used_by_repo</code> variable, as the Deploy Role is dependent on this value for its conditional access.</p>"},{"location":"wap/iam_accounts/#development","title":"Development","text":""},{"location":"wap/iam_accounts/#initial-setup-and-seed-role","title":"Initial Setup and Seed Role","text":"<p>See Terraform Bootstrap</p>"},{"location":"wap/iam_legacy/","title":"IAM Legacy","text":""},{"location":"wap/iam_legacy/#login-flow","title":"Login Flow","text":"<p>Main Org Account, IAM user - <code>wmax641</code> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"sts:AssumeRole\",\n            \"Resource\": [\n                \"arn:aws:iam::*:role/OrganizationAccountAccessRole\"\n            ]\n        }\n    ]\n}\n</code></pre></p> <p>Then on target accounts, have a role <code>OrganizationAccountAccessRole</code>  this which is assumed by the above account with this trust principal: <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"arn:aws:iam::xxxxxxxxxxxx:user/wmax641\",\n                ]\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"wap/tf_bootstrap/","title":"Terraform Environment Bootstrap","text":""},{"location":"wap/tf_bootstrap/#s3-bucket","title":"S3 Bucket","text":"<ul> <li>Stores the state file. Should be named <code>tf-&lt;ACCOUNT_ID&gt;</code></li> <li>Bucket versioning enabled</li> <li>Lifecycle policy, 90d deletion of non-current versions</li> </ul>"},{"location":"wap/tf_bootstrap/#iam","title":"IAM","text":"<p>See IAM and Accounts</p> <p>This first needs to be deployed as admin to set up the <code>IAMSeedRole</code> wmax641/wap-iam-seed-role</p> <p>Once deployed, the <code>IAMSeedRole</code> has the below role assumption policy that allows it to be assumed from a Github Actions builds from wmax641/wap-iam-accounts repo, depending on its environment</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"arn:aws:iam::071440211637:oidc-provider/token.actions.githubusercontent.com\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"token.actions.githubusercontent.com:aud\": \"sts.amazonaws.com\"\n                },\n                \"StringLike\": {\n                    \"token.actions.githubusercontent.com:sub\": [\n                        \"repo:wmax641/wap-iam-accounts:environment:production\",\n                        \"repo:wmax641/wap-iam-accounts:environment:development\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n</code></pre>"}]}